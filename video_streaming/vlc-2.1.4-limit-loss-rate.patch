From 36f81713c2ef8015dbedfcdcded5df0a0cf469a0 Mon Sep 17 00:00:00 2001
From: Bruno George Moraes <brunogm0@gmail.com>
Date: Wed, 30 Jul 2014 02:43:16 +0200
Subject: [PATCH] modules/udp.c: limit loss rate

Signed-off-by: Paolo Valente <paolo.valente@unimore.it>
Signed-off-by: Bruno George Moraes <brunogm0@gmail.com>
---
 modules/access_output/udp.c | 46 +++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 44 insertions(+), 2 deletions(-)

diff --git a/modules/access_output/udp.c b/modules/access_output/udp.c
index 5c04c50..1ea40ac 100644
--- a/modules/access_output/udp.c
+++ b/modules/access_output/udp.c
@@ -73,6 +73,12 @@ static void Close( vlc_object_t * );
                           "helps reducing the scheduling load on " \
                           "heavily-loaded systems." )
 
+#define LOSS_TEXT ("Max loss rate (x 1000)")
+#define LOSS_LONGTEXT ("Maximum loss rate accepted over Window packets.")
+
+#define WINDOW_TEXT ("Window (pkts)")
+#define WINDOW_LONGTEXT ("Window for packet loss calculation.")
+
 vlc_module_begin ()
     set_description( N_("UDP stream output") )
     set_shortname( "UDP" )
@@ -82,6 +88,11 @@ vlc_module_begin ()
     add_integer( SOUT_CFG_PREFIX "group", 1, GROUP_TEXT, GROUP_LONGTEXT,
                                  true )
 
+    add_integer( SOUT_CFG_PREFIX "loss", 0, LOSS_TEXT, LOSS_LONGTEXT,
+                                 true )
+    add_integer( SOUT_CFG_PREFIX "win", 0, WINDOW_TEXT, WINDOW_LONGTEXT,
+                                 true )
+
     set_capability( "sout access", 0 )
     add_shortcut( "udp" )
     set_callbacks( Open, Close )
@@ -94,6 +105,8 @@ vlc_module_end ()
 static const char *const ppsz_sout_options[] = {
     "caching",
     "group",
+    "loss",
+    "win",
     NULL
 };
 
@@ -118,6 +131,7 @@ struct sout_access_out_sys_t
     int           i_handle;
     bool          b_mtu_warning;
     size_t        i_mtu;
+    float         i_max_loss;
 
     block_fifo_t *p_fifo;
     block_fifo_t *p_empty_blocks;
@@ -228,8 +242,13 @@ static int Open( vlc_object_t *p_this )
     }
 
     p_access->pf_write = Write;
+
+    p_sys->i_max_loss =
+	var_GetInteger( p_access, SOUT_CFG_PREFIX "loss" ) / 1000.0;
     p_access->pf_seek = Seek;
     p_access->pf_control = Control;
+    msg_Dbg( p_access, "udp access output opened(dst_port %d) loss=%f",
+	     i_dst_port, p_sys->i_max_loss );
 
     return VLC_SUCCESS;
 }
@@ -394,6 +413,12 @@ static block_t *NewUDPPacket( sout_access_out_t *p_access, mtime_t i_dts)
     return p_buffer;
 }
 
+/*
+ * maximum interarrival time (in packets) with a loss < i_max_loss
+ */
+#define BURST_WINDOW(p_this) ((p_this)->i_max_loss * 100)
+#define MAX_UDELAY 1000000
+
 /*****************************************************************************
  * ThreadWrite: Write a packet on the network at the good time.
  *****************************************************************************/
@@ -404,8 +429,9 @@ static void* ThreadWrite( void *data )
     mtime_t i_date_last = -1;
     const unsigned i_group = var_GetInteger( p_access,
                                              SOUT_CFG_PREFIX "group" );
-    mtime_t i_to_send = i_group;
-    unsigned i_dropped_packets = 0;
+    volatile mtime_t i_to_send = i_group;
+    volatile unsigned i_dropped_packets = 0;
+    volatile int i_idx = 0, i_last_bad = -1;
 
     for (;;)
     {
@@ -436,6 +462,8 @@ static void* ThreadWrite( void *data )
         }
 
         block_cleanup_push( p_pk );
+
+	i_idx++ ;
         i_to_send--;
         if( !i_to_send || (p_pk->i_flags & BLOCK_FLAG_CLOCK) )
         {
@@ -459,6 +487,20 @@ static void* ThreadWrite( void *data )
             msg_Dbg( p_access, "packet has been sent too late (%"PRId64 ")",
                      i_sent - i_date );
         }
+	if ( i_sent > i_date + MAX_UDELAY )
+	    {
+		msg_Dbg( p_access,
+			 "packet %d late for %fs buffering",
+			 i_idx, MAX_UDELAY/1000000.0 );
+		if( i_last_bad != -1 &&
+		    i_idx - i_last_bad < BURST_WINDOW(p_sys) )
+		    {
+			msg_Dbg( p_access, "MAX_LOSS_RATE exceeded (%d-%d/%.0f)",
+				 i_idx, i_last_bad,
+				 BURST_WINDOW(p_sys) );
+		    }
+		i_last_bad = i_idx;
+	    }
 #endif
 
         block_FifoPut( p_sys->p_empty_blocks, p_pk );
-- 
2.0.3

